package bnymellon;

public class NumberOfBribesRequired {
	
	public static void main(String[] args) {
		minimumBribes(new int[]{1,2,6,4,3,7,5,10,9,12,8,11,14,17,15,19,13,18,16,20,22,21,23,25,26,24,28,27,31,32,30,29,34,33,36,37,38,40,35,42,43,39,41,45,44,47,46,49,50,48,51,55,53,52,54,59,57,60,56,62,63,61,58,65,64,69,67,66,68,72,70,71,73,75,77,76,74,78,79,81,82,88,80,86,83,87,85,84,91,89,92,94,90,93,97,96,95,99,98,101,100,102,106,103,107,104,105,110,109,108,112,111,114,118,115,113,117,119,116,121,123,122,125,120,124,128,126,130,127,134,129,136,135,131,132,138,137,140,133,139,142,141,144,143,146,145,148,147,150,149,153,154,151,158,152,156,155,159,157,162,160,161,164,165,167,163,166,168,170,169,171,172,173,174,175,177,176,180,178,179,182,181,184,183,185,187,189,186,191,190,194,188,192,193,195,197,196,199,200,198,202,201,203,206,204,208,205,207,210,209,211,212,217,213,215,214,216,219,218,221,223,222,220,224,227,226,229,225,228,231,233,230,232,235,234,237,236,238,241,242,240,239,243,244,247,245,248,246,250,249,251,252,254,255,253,259,258,257,256,262,260,263,261,267,265,264,268,266,272,270,273,269,271,275,274,279,277,276,281,280,278,282,284,286,287,283,285,291,288,290,289,293,295,292,294,298,296,299,297,301,300,306,302,305,303,307,304,310,309,308,311,314,313,312,317,316,315,319,318,320,322,323,324,321,328,327,325,330,329,326,332,331,337,334,333,339,336,335,338,341,340,343,342,344,346,345,348,347,350,351,352,349,356,355,353,357,354,360,358,359,362,361,365,367,364,363,370,366,368,369,373,371,374,372,375,378,377,380,376,379,381,383,382,387,386,385,384,388,389,390,393,392,391,395,399,398,396,394,400,397,407,403,402,401,404,408,406,405,409,411,410,412,415,413,414,417,419,416,420,418,423,422,421,429,426,424,425,427,432,428,431,430,433,436,435,434,438,440,437,445,439,441,443,444,442,446,449,447,451,448,452,453,450,454,456,455,458,460,457,459,462,461,463,467,466,464,465,470,468,469,474,473,471,472,475,476,478,477,482,479,481,480,483,484,487,486,485,490,489,488,493,494,491,497,492,496,498,495,500,499,503,502,501,504,505,507,506,508,511,509,512,513,510,515,517,518,514,516,521,520,522,519,524,525,523,528,527,530,529,526,533,532,531,535,534,538,537,536,539,541,544,540,542,543,546,545,547,549,548,550,551,553,552,554,555,556,558,563,561,557,559,562,560,569,565,566,564,572,568,567,570,571,574,573,578,576,575,577,581,579,582,583,580,585,584,586,587,588,591,589,590,593,592,595,594,597,596,598,600,599,602,604,601,606,607,603,611,610,605,612,609,613,608,615,616,614,618,617,621,619,622,620,623,627,624,625,629,626,628,633,630,634,631,632,636,637,639,635,640,638,641,643,642,644,645,646,648,647,650,649,653,651,652,654,656,660,655,657,661,658,664,659,663,662,665,667,668,669,666,671,670,672,674,677,673,675,679,678,681,676,682,680,685,684,683,688,689,687,686,691,690,694,693,695,692,696,698,703,697,700,701,699,706,702,704,705,708,710,709,707,712,713,711,714,717,715,719,721,718,720,722,716,724,723,727,725,726,729,730,728,733,731,732,736,734,740,735,737,739,738,742,744,743,741,745,746,748,747,751,750,749,753,754,755,752,757,756,759,758,760,761,762,764,763,765,771,767,769,766,768,772,770,773,774,776,775,778,779,777,781,780,782,783,786,785,784,787,788,789,793,790,792,791,795,796,794,799,797,801,798,800,803,802,805,804,806,807,809,808,812,811,816,814,810,817,815,818,821,813,819,823,824,820,822,827,825,830,826,828,829,833,831,832,834,837,836,835,839,838,840,844,843,842,841,845,846,848,847,849,850,852,853,851,854,855,858,857,856,861,860,859,862,868,866,864,865,863,870,869,867,872,871,874,873,877,875,876,878,880,879,881,884,882,885,883,887,886,888,889,891,890,892,893,894,896,897,895,898,899,901,902,900,904,905,903,907,906,909,910,913,911,908,915,912,916,914,917,918,920,919,921,923,924,922,926,928,925,929,931,927,930,934,932,935,933,936,937,939,940,938,941,943,942,945,944,947,946,948,951,949,950,952,954,956,953,957,955,959,958,961,962,960,964,965,963,966,968,967,970,969,971,973,972,975,977,978,976,974,979,981,980,982,984,983,986,985,988,987,989,991,992,990,996,994,993,995,997});
		//minimumBribes(new int[]{1,2,5,3,7,8,6,4});
	}
	
	
	 static void minimumBribes(int[] q) {

	        int counter =0;
	        boolean chaos = false;

	        for(int i=0;i<q.length;i++){
	            int countSmaller=0;
	            int target = (i<q.length-3)?(i+3):q.length;
	                for(int j=i+1;j<target;j++){
	                    if(q[j]<q[i]){
	                    	++countSmaller;
	                    }

	                    if(countSmaller>=3){
	                    chaos=true;
	                    System.out.println("Too chaotic");
	                    break;            
	                    }
	                }
	                if(chaos)
	                	break;
	            counter+=countSmaller;
	        }
	        if(!chaos)
	        System.out.println(counter);
	    }
}
